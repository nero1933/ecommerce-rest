version: '3.9'

services:
  app:
    container_name: app
    build:
      context: .
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
      - ./data/web:/vol/web
    environment:
      - DEBUG=${DEBUG}
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - FROM_EMAIL=${FROM_EMAIL}
      - USER_CONFIRMATION_KEY=${USER_CONFIRMATION_KEY}
      - PASSWORD_CONFIRMATION_KEY=${PASSWORD_CONFIRMATION_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  db:
    container_name: db
    image: postgres:15-alpine
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready", "-q", "-d", "${DB_NAME}", "-U", "${DB_USER}" ]
#      interval: 5s
#      timeout: 5s
#      retries: 5
#    env_file:
#      - .env
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${DB_USER} -d ${DB_NAME}'" ]
      interval: 3s
      timeout: 3s
      retries: 3

  redis:
    container_name: redis
    image: redis:7.0.5-alpine
    hostname: redis
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 10s
      retries: 5

  worker:
    container_name: celery
    build:
      context: .
    hostname: worker
    entrypoint: celery
    command: -A app worker --beat --loglevel=info
    volumes:
      - ./app:/app
    environment:
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
    links:
      - redis
      - db
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  flower:
    container_name: flower
    build:
      context: .
    hostname: worker
    entrypoint: celery
    command: -A app flower -l INFO
    volumes:
      - ./app:/app
    environment:
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    links:
      - redis
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "5555:5555"

#  beat:
#    container_name: beat
#    build:
#      context: .
#    hostname: beat
#    entrypoint: celery
#    command: -A app beat -l INFO
#    volumes:
#      - ./app:/app
#    environment:
#      - DEBUG=${DEBUG}
#      - SECRET_KEY=${SECRET_KEY}
#      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
#    links:
#      - redis
#    depends_on:
#      - redis
